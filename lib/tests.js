// Generated by CoffeeScript 1.9.3
(function() {
  var CND, FLSL, alert, badge, debug, echo, help, info, log, rpr, test, urge, warn, whisper, ƒ,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'JIZURA/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  FLSL = require('./main');

  ƒ = Array.from;

  this["FLSL._is_sublist_at accepts and rejects flat sublists"] = function(T) {
    var equals, i, len, matcher, probe, probes_and_matchers, ref, results;
    probes_and_matchers = [[[ƒ('abcdefgh'), 0, 0, 2], true], [[ƒ('abcdefgh'), 3, 3, 5], true], [[ƒ('abc'), 0, 0, 3], true], [[ƒ('abcdefgh'), 1, 0, 2], false], [[ƒ('abcdefgh'), 0, 3, 5], false], [[ƒ('abc'), 1, 0, 3], false], [[ƒ('abc'), 0, 0, 4], false]];
    ref = [
      (function(a, b) {
        return a === b;
      }), CND.equals
    ];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      equals = ref[i];
      results.push((function() {
        var j, len1, ref1, results1;
        results1 = [];
        for (j = 0, len1 = probes_and_matchers.length; j < len1; j++) {
          ref1 = probes_and_matchers[j], probe = ref1[0], matcher = ref1[1];
          results1.push(T.eq(FLSL._is_sublist_at.apply(FLSL, slice.call(probe).concat([equals])), matcher));
        }
        return results1;
      })());
    }
    return results;
  };

  this["FLSL.find_longest_repeating_sublist 1"] = function(T) {
    var equals, i, len, matcher, probe, probes_and_matchers, ref, result, results;
    probes_and_matchers = [['abcdef', null], ['abcabc', 'abc'], ['abcdefcd', 'cd']];
    ref = [null, CND.equals];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      equals = ref[i];
      results.push((function() {
        var j, len1, ref1, results1;
        results1 = [];
        for (j = 0, len1 = probes_and_matchers.length; j < len1; j++) {
          ref1 = probes_and_matchers[j], probe = ref1[0], matcher = ref1[1];
          probe = ƒ(probe);
          if ((result = FLSL.find_longest_repeating_sublist(probe, equals)) != null) {
            result = result.join('');
          }
          results1.push(T.eq(result, matcher));
        }
        return results1;
      })());
    }
    return results;
  };

  this["FLSL.find_longest_repeating_sublist 2"] = function(T) {
    var equals, i, len, matcher, probe, probes_and_matchers, ref, result, results;
    probes_and_matchers = [["fallacy idiocy idiot fall sample cosomos osmosis", "cy idio"]];
    ref = [null, CND.equals];
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      equals = ref[i];
      results.push((function() {
        var j, len1, ref1, results1;
        results1 = [];
        for (j = 0, len1 = probes_and_matchers.length; j < len1; j++) {
          ref1 = probes_and_matchers[j], probe = ref1[0], matcher = ref1[1];
          probe = ƒ(probe);
          if ((result = FLSL.find_longest_repeating_sublist(probe, equals)) != null) {
            result = result.join('');
          }
          results1.push(T.eq(result, matcher));
        }
        return results1;
      })());
    }
    return results;
  };

  this["FLSL.find_longest_repeating_sublist 3"] = function(T) {
    var equals, glyph, i, j, len, len1, matcher, probe, probes_and_matchers, ref, ref1, result;
    probes_and_matchers = [["𣎱", ["月", "日", "日", "丶", "&cdp#x887a;", "矢"], ["日"]], ["叔", ["尗", "又"], null], ["叕", ["㕛", "㕛"], ["㕛"]], ["叕", ["㕛", "㕛"], ["㕛"]], ["取", ["耳", "又"], null], ["𣎎", ["月", "龹", "人", "人"], ["人"]], ["𣎱", ["月", "日", "日", "丶", "&cdp#x887a;", "矢"], ["日"]], ["𣓠", ["木", "戶", "戶"], ["戶"]], ["𣓡", ["木", "丿", "呂"], null], ["𣓢", ["无", "无", "木"], ["无"]], ["𠫒", ["厡", "厡", "厡"], ["厡"]], ["𧾭", ["𣥚", "𣥚", "𣥚"], ["𣥚"]], ["𧢛", ["䀠", "目", "几", "几", "几"], ["几"]]];
    ref = [null, CND.equals];
    for (i = 0, len = ref.length; i < len; i++) {
      equals = ref[i];
      for (j = 0, len1 = probes_and_matchers.length; j < len1; j++) {
        ref1 = probes_and_matchers[j], glyph = ref1[0], probe = ref1[1], matcher = ref1[2];
        result = FLSL.find_longest_repeating_sublist(probe, equals);
        echo(JSON.stringify([glyph, probe, result]));
        T.eq(result, matcher);
      }
    }
    return null;
  };

  this["benchmark"] = function(T, done) {
    var equals, glyph, i, j, k, len, len1, matcher, n, probe, probes_and_matchers, ref, ref1, result, t0, t1;
    probes_and_matchers = [["𣎱", ["月", "日", "日", "丶", "&cdp#x887a;", "矢"], ["日"]], ["叔", ["尗", "又"], null], ["叕", ["㕛", "㕛"], ["㕛"]], ["叕", ["㕛", "㕛"], ["㕛"]], ["取", ["耳", "又"], null], ["𣎎", ["月", "龹", "人", "人"], ["人"]], ["𣎱", ["月", "日", "日", "丶", "&cdp#x887a;", "矢"], ["日"]], ["𣓠", ["木", "戶", "戶"], ["戶"]], ["𣓡", ["木", "丿", "呂"], null], ["𣓢", ["无", "无", "木"], ["无"]], ["𠫒", ["厡", "厡", "厡"], ["厡"]], ["𧾭", ["𣥚", "𣥚", "𣥚"], ["𣥚"]], ["𧢛", ["䀠", "目", "几", "几", "几"], ["几"]]];
    ref = [null, CND.equals];
    for (i = 0, len = ref.length; i < len; i++) {
      equals = ref[i];
      t0 = +new Date();
      for (n = j = 0; j < 1000; n = ++j) {
        for (k = 0, len1 = probes_and_matchers.length; k < len1; k++) {
          ref1 = probes_and_matchers[k], glyph = ref1[0], probe = ref1[1], matcher = ref1[2];
          result = FLSL.find_longest_repeating_sublist(probe, equals);
        }
      }
      t1 = +new Date();
      help("equals: " + (rpr(equals)));
      help("dt: " + (t1 - t0));
    }
    return done();
  };


  /*
  string = """fallacy idiocy idiot fall sample cosomos osmosis"""
  string = """abcdefabc"""
  
  formulas = [
    [ '叔', '尗又' ]
    [ '叕', '㕛㕛' ]
    [ '叕', '双双' ]
    [ '取', '耳又' ]
    [ '𣎎', '月龹人人' ]
    [ '𣎱', '月(日日丶&cdp#x887a;矢)' ]
    [ '𣓠', '(木戶戶)' ]
    [ '𣓡', '木丿呂' ]
    [ '𣓢', '无无木' ]
    ]
  
   * node ../hollerith/lib/dump.js --limit=500 ../jizura-datasources/data/leveldb-v2 "spo|叔|formula/ic0"
  
  glyphs_and_ic0s = [
    [ '𣎱', [ '月', '日', '日', '丶', '&cdp#x887a;', '矢' ], ]
    [ '叔', [ '尗', '又' ], ]
    [ '叕', [ '㕛', '㕛' ], ]
    [ '叕', [ '㕛', '㕛' ], ]
    [ '取', [ '耳', '又' ], ]
    [ '𣎎', [ '月', '龹', '人', '人' ], ]
    [ '𣎱', [ '月', '日', '日', '丶', '&cdp#x887a;', '矢' ], ]
    [ '𣓠', [ '木', '戶', '戶' ], ]
    [ '𣓡', [ '木', '丿', '呂' ], ]
    [ '𣓢', [ '无', '无', '木' ], ]
    ]
   */

  this._main = function(handler) {
    return test(this, {
      'timeout': 2500
    });
  };

  if (module.parent == null) {
    this._main();
  }

}).call(this);
