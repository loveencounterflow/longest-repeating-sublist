// Generated by CoffeeScript 1.9.3
(function() {
  var CND, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, njs_util, rpr, urge, warn, whisper;

  njs_util = require('util');

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'scratch';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  this._is_sublist_at = function(me, my_start, your_start, your_stop, equals) {

    /* Return whether the sublist of `me` that extends through `[ your_start ... your_stop ]` is fully
    contained within list `me`, starting at `me`'s index as given by `my_start`'. This will be trivially
    false if `your_start` or `your_stop` lie outside the legal indixes into `me`, or if the start lies on or
    to the right of the stop (zero-length sublists being treated as not contained in any list); it
    will be trivially true if none of the above exclusions are met with and `my_start` is on the same position
    as `your_start`.
     */
    var i, idx, my_stop, ref, your_length;
    if (your_start < 0) {
      return false;
    }
    if (your_start > (my_stop = me.length)) {
      return false;
    }
    if (your_start >= your_stop) {
      return false;
    }
    if (your_stop < 0) {
      return false;
    }
    if (your_stop > my_stop) {
      return false;
    }
    if (me.length - my_start < (your_length = your_stop - your_start)) {
      return false;
    }
    if (my_start === your_start) {
      return true;
    }
    for (idx = i = 0, ref = your_length; i < ref; idx = i += +1) {
      if (!equals(me[my_start + idx], me[your_start + idx])) {
        return false;
      }
    }
    return true;
  };

  this._find_longest_repeating_sublist = function(me, equals) {
    var i, j, k, max_length, my_start, my_stop, ref, ref1, ref2, ref3, your_length, your_start, your_stop;
    if (equals == null) {
      equals = null;
    }
    if (equals == null) {
      equals = function(a, b) {
        return a === b;
      };
    }
    max_length = Math.floor(me.length / 2);
    for (your_length = i = ref = max_length; i >= 1; your_length = i += -1) {
      for (my_start = j = 0, ref1 = me.length - 2 * your_length; j <= ref1; my_start = j += +1) {
        my_stop = my_start + your_length;
        for (your_start = k = ref2 = my_start + your_length, ref3 = me.length - your_length; k <= ref3; your_start = k += +1) {
          your_stop = your_start + your_length;
          if (this._is_sublist_at(me, my_start, your_start, your_stop, equals)) {
            return [your_start, your_stop];
          }
        }
      }
    }
    return null;
  };

  this.find_longest_repeating_sublist = function(me, equals) {
    var R;
    if (equals == null) {
      equals = null;
    }
    if ((R = this._find_longest_repeating_sublist(me, equals)) == null) {
      return R;
    }
    return me.slice(R[0], R[1]);
  };

}).call(this);
